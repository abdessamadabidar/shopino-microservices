version: '3.8'
services:
  #################################### Discovery service #######################################
  discovery-service:
    build: ./services/discovery-service/
    container_name: discovery-service
    ports:
      - '8761:8761'
    expose:
      - '8761'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8761/actuator/health"]
      interval: 20s
      timeout: 5s
      retries: 5
      start_period: 30s
    environment:
      eureka.instance.hostname: discovery-service
      eureka.client.serviceUrl.defaultZone: http://discovery-service:8761/eureka
      management.zipkin.tracing.endpoint: http://zipkin:9411/api/v2/spans

  #################################### Config service #######################################
  config-service:
    build: ./services/config-service/
    container_name: config-service
    env_file:
      - ./services/config-service/.env
    ports:
      - '8888:8888'
    expose:
      - '8888'
    environment:
      eureka.client.serviceUrl.defaultZone: http://discovery-service:8761/eureka
      spring.cloud.config.server.git.password: ${GITHUB_PUBLIC_ACCESS_TOKEN}
      management.zipkin.tracing.endpoint: http://zipkin:9411/api/v2/spans
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8888/actuator/health"]
      interval: 20s
      timeout: 5s
      retries: 5
      start_period: 30s
    depends_on:
      discovery-service:
        condition: service_healthy

  ################################### Gateway service #######################################
  gateway-service:
    build: ./services/gateway-service/
    container_name: gateway-service
    ports:
      - '8000:8000'
    expose:
      - '8000'
    environment:
      eureka.client.serviceUrl.defaultZone: http://discovery-service:8761/eureka
      management.zipkin.tracing.endpoint: http://zipkin:9411/api/v2/spans
      spring.cloud.gateway.routes[0].id: customer-service
      spring.cloud.gateway.routes[0].uri: http://customer-service:8081
      spring.cloud.gateway.routes[0].predicates[0]: Path= /api/v1/customers/**
      spring.cloud.gateway.routes[1].id: product-service
      spring.cloud.gateway.routes[1].uri: http://product-service:8082
      spring.cloud.gateway.routes[1].predicates[0]: Path= /api/v1/products/**
      spring.cloud.gateway.routes[2].id: payment-service
      spring.cloud.gateway.routes[2].uri: http://payment-service:8084
      spring.cloud.gateway.routes[2].predicates[0]: Path= /api/v1/payments/**
      spring.cloud.gateway.routes[3].id: notification-service
      spring.cloud.gateway.routes[3].uri: http://notification-service:8085
      spring.cloud.gateway.routes[3].predicates[0]: Path= /api/v1/notifications/**
      spring.cloud.gateway.routes[4].id: order-service
      spring.cloud.gateway.routes[4].uri: http://order-service:8083
      spring.cloud.gateway.routes[4].predicates[0]: Path= /api/v1/orders/**
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8000/actuator/health" ]
      interval: 20s
      timeout: 5s
      retries: 5
      start_period: 30s
    depends_on:
      config-service:
        condition: service_healthy

  #################################### Customer service #######################################
  customer-service:
    build: ./services/customer-service/
    container_name: customer-service
    ports:
      - '8081:8081'
    expose:
      - '8081'
    environment:
      eureka.client.serviceUrl.defaultZone: http://discovery-service:8761/eureka
      spring.datasource.url: jdbc:postgresql://customer-service-db:5432/customer_service_db
      spring.datasource.username: abdessamad
      spring.datasource.password: abdessamadpwd
      management.zipkin.tracing.endpoint: http://zipkin:9411/api/v2/spans
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8081/actuator/health" ]
      interval: 20s
      timeout: 5s
      retries: 5
      start_period: 30s
    depends_on:
      config-service:
        condition: service_healthy
      customer-service-db:
        condition: service_healthy


  customer-service-db:
    image: postgres
    container_name: customer-service-db
    ports:
      - '5431:5432'
    environment:
      POSTGRES_USER: abdessamad
      POSTGRES_DB: customer_service_db
      POSTGRES_PASSWORD: abdessamadpwd
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready" ]
      interval: 10s
      timeout: 5s
      retries: 5

  #################################### Product service #######################################
  product-service:
    build: ./services/product-service/
    container_name: product-service
    ports:
      - '8082:8082'
    expose:
      - '8082'
    environment:
      eureka.client.serviceUrl.defaultZone: http://discovery-service:8761/eureka
      spring.datasource.url: jdbc:postgresql://product-service-db:5432/product_service_db
      spring.datasource.username: abdessamad
      spring.datasource.password: abdessamadpwd
      management.zipkin.tracing.endpoint: http://zipkin:9411/api/v2/spans
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8082/actuator/health" ]
      interval: 20s
      timeout: 5s
      retries: 5
      start_period: 30s
    depends_on:
      config-service:
        condition: service_healthy
      product-service-db:
        condition: service_healthy

  product-service-db:
    image: postgres
    container_name: product-service-db
    ports:
      - '5432:5432'
    environment:
      POSTGRES_USER: abdessamad
      POSTGRES_DB: product_service_db
      POSTGRES_PASSWORD: abdessamadpwd
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready" ]
      interval: 10s
      timeout: 5s
      retries: 5

  #################################### Payment service #######################################

  payment-service:
    build: ./services/payment-service/
    container_name: payment-service
    ports:
      - '8084:8084'
    expose:
      - '8084'
    environment:
      eureka.client.serviceUrl.defaultZone: http://discovery-service:8761/eureka
      spring.datasource.url: jdbc:postgresql://payment-service-db:5432/payment_service_db
      spring.datasource.username: abdessamad
      spring.datasource.password: abdessamadpwd
      spring.kafka.producer.bootstrap-servers: kafka:9092
      management.zipkin.tracing.endpoint: http://zipkin:9411/api/v2/spans
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8084/actuator/health" ]
      interval: 20s
      timeout: 5s
      retries: 5
      start_period: 30s
    depends_on:
      config-service:
        condition: service_healthy
      payment-service-db:
        condition: service_healthy
      kafka:
        condition: service_healthy

  payment-service-db:
    image: postgres
    container_name: payment-service-db
    ports:
      - '5434:5432'
    environment:
      POSTGRES_USER: abdessamad
      POSTGRES_DB: payment_service_db
      POSTGRES_PASSWORD: abdessamadpwd
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready" ]
      interval: 10s
      timeout: 5s
      retries: 5

  #################################### Notification service #######################################
  notification-service:
    build: ./services/notification-service/
    container_name: notification-service
    ports:
      - '8085:8085'
    expose:
      - '8085'
    environment:
      eureka.client.serviceUrl.defaultZone: http://discovery-service:8761/eureka
      spring.data.mongodb.host: notification-service-db
      spring.data.mongodb.username: abdessamad
      spring.data.mongodb.password: abdessamadpwd
      spring.data.mongodb.authentication-database: admin
      spring.kafka.consumer.bootstrap-servers: kafka:9092
      management.zipkin.tracing.endpoint: http://zipkin:9411/api/v2/spans
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8085/actuator/health" ]
      interval: 20s
      timeout: 5s
      retries: 5
      start_period: 30s
    depends_on:
      config-service:
        condition: service_healthy
      notification-service-db:
        condition: service_healthy
      kafka:
        condition: service_healthy

  notification-service-db:
    image: mongo:5.0
    container_name: notification-service-db
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=abdessamad
      - MONGO_INITDB_ROOT_PASSWORD=abdessamadpwd
      - MONGO_INITDB_DATABASE=notification_service_db
    healthcheck:
      test: ["CMD","mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      start_period: 30s
      retries: 5

    #################################### Order service #######################################

  order-service:
    build: ./services/order-service/
    container_name: order-service
    ports:
      - '8083:8083'
    expose:
      - '8083'
    environment:
      eureka.client.serviceUrl.defaultZone: http://discovery-service:8761/eureka
      spring.datasource.url: jdbc:postgresql://order-service-db:5432/order_service_db
      spring.datasource.username: abdessamad
      spring.datasource.password: abdessamadpwd
      spring.kafka.producer.bootstrap-servers: kafka:9092
      management.zipkin.tracing.endpoint: http://zipkin:9411/api/v2/spans
      openfeign.route.customers-url: http://gateway-service:8000/api/v1/customers
      openfeign.route.products-url: http://gateway-service:8000/api/v1/products
      openfeign.route.payments-url: http://gateway-service:8000/api/v1/payments
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8083/actuator/health" ]
      interval: 20s
      timeout: 5s
      retries: 5
      start_period: 30s
    depends_on:
      gateway-service:
        condition: service_healthy
      customer-service:
        condition: service_healthy
      product-service:
        condition: service_healthy
      payment-service:
        condition: service_healthy
      order-service-db:
        condition: service_healthy
      kafka:
        condition: service_healthy

  order-service-db:
    image: postgres
    container_name: order-service-db
    ports:
      - '5435:5432'
    environment:
      POSTGRES_USER: abdessamad
      POSTGRES_DB: order_service_db
      POSTGRES_PASSWORD: abdessamadpwd
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready" ]
      interval: 10s
      timeout: 5s
      retries: 5

    #################################### Kafka service #######################################
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.4
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - '22181:2181'

  kafka:
    image: confluentinc/cp-kafka:7.4.4
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - '9092:9092'
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    healthcheck:
      test: kafka-topics --bootstrap-server kafka:9092 --list
      interval: 30s
      timeout: 10s
      retries: 3

  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin
    ports:
      - '5050:80'
    environment:
      PGADMIN_DEFAULT_EMAIL: abdessamad.abidar@outlook.com
      PGADMIN_DEFAULT_PASSWORD: 1234

  mongo-express:
    image: mongo-express
    container_name: mongo-express
    ports:
      - '5000:8081'
    environment:
      - ME_CONFIG_MONGODB_ADMINUSERNAME=abdessamad
      - ME_CONFIG_MONGODB_ADMINPASSWORD=abdessamadpwd
      - ME_CONFIG_MONGODB_URL=mongodb://abdessamad:abdessamadpwd@notification-service-db:27017/notification_service_db?authSource=admin
      - ME_CONFIG_BASICAUTH_USERNAME=mexpress
      - ME_CONFIG_BASICAUTH_PASSWORD=mexpress
      - ME_CONFIG_MONGODB_SERVER=notification-service-db
    links:
      - notification-service-db
    restart: unless-stopped
    depends_on:
      notification-service-db:
        condition: service_healthy

  zipkin:
    image: openzipkin/zipkin
    container_name: zipkin
    ports:
      - '9411:9411'